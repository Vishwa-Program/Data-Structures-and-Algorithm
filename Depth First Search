class Graph:
    def __init__(self):
        self.graph = {}
        self.directed = False

    def addVertex(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []

    def addEdge(self, src, dest):
        self.addVertex(src)
        self.addVertex(dest)

        self.graph[src].append(dest)
        if not self.directed:
            self.graph[dest].append(src)

    def displaygraph(self):
        for vertex in self.graph:
            print(f"{vertex} -> {self.graph[vertex]}")

    def depth_first_search(self, start_vertex, visited=None):
        if visited is None:
            visited = set()
        
        visited.add(start_vertex)
        print(start_vertex, end=' ')

        for neighbor in self.graph[start_vertex]:
            if neighbor not in visited:
                self.depth_first_search(neighbor, visited)


# Example usage
G = Graph()
G.addEdge('A', 'B')
G.addEdge('A', 'D')
G.addEdge('A', 'C')
G.addEdge('C', 'D')
G.addEdge('D', 'E')

G.displaygraph()

# Perform DFS starting from vertex 'A'
print("Depth First Search starting from vertex 'A':")
G.depth_first_search('A')
