class Graph:
    def __init__(self):
        self.graph = {}
        self.directed = False

    def addVertex(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []

    def addEdge(self, src, dest):
        self.addVertex(src)
        self.addVertex(dest)

        self.graph[src].append(dest)
        if not self.directed:
            self.graph[dest].append(src)

    def displaygraph(self):
        for vertex in self.graph:
            print(f"{vertex} -> {self.graph[vertex]}")

    def breadth_first_search(self, start_vertex):
        visited = set()  # Track visited vertices
        queue = [start_vertex]  # Initialize the queue with the start vertex
        visited.add(start_vertex)

        while queue:
            vertex = queue.pop(0)  # Dequeue a vertex (first in, first out)
            print(vertex, end=' ')  # Visit the vertex

            # Enqueue all unvisited neighbors
            for neighbor in self.graph[vertex]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)


# Example usage
G = Graph()
G.addEdge('A', 'B')
G.addEdge('A', 'D')
G.addEdge('A', 'C')
G.addEdge('C', 'D')
G.addEdge('D', 'E')

G.displaygraph()

# Perform BFS starting from vertex 'A'
print("\nBreadth First Search starting from vertex 'A':")
G.breadth_first_search('A')
